maxrandval = 1000000

def getentranceandfloor(flatno, flatsonfloor, floors):
    '''
    Вычисление этажа и подъезда у рассматриваемой квартиры.

    Paramters
    ---------
    flatsonfloor (int) : количество квартир на лестничной клетке
    flatno (int) : номер известной квартиры;
    floors (int) : количество этажей в доме;

    Returns
    ---------
    - номер подъезда в котором находится рассматриваемая квартира
    - номер этаэа на котором находится рассматриваемая квартира
    '''
    # количество предыдущих лестничных пролетов
    floorsbefore = (flatno - 1)//flatsonfloor
    # вычисляем какой номер подъезда у рассматривамой
    # квартиры
    entrance = floorsbefore//floors + 1
    # вычисляем этаж у рассматриваемой квартиры
    floor = floorsbefore % floors + 1
    return entrance, floor

def check(k1, m, k2, p2, n2, flatsonfloor):
    '''
    Parameters
    ----------
    flatsonfloor (int) : количество квартир на лестничной клетке 
    '''
    # получаем какой подъезд и этаж должны соотсветсвовать этой
    # известной квартире - если они совпадают с теми что
    # получаем из входных данных, то получается данные валидны
    # и можно вернуть результат
    entrance2, floor2 = getentranceandfloor(k2, flatsonfloor, m)
    if entrance2 == p2 and floor2 == n2:
        return getentranceandfloor(k1, flatsonfloor, m)
    
    # в противном случае нужно сказать программе что
    # получена не валидная инфомрация
    return -1, -1


def slow(k1, m, k2, p2, n2):
    '''
    Функция реализует основную часть программы.

    Parameters
    -----------
    k1 (int) : номер искомой квартиры;
    m (int) : количество этажей в рассматриваемом доме;
    k2 (int) : номер известной квартиры;
    p2 (int) : подъезд известной квартиры;
    n2 (int) : этаж известной квартиры.

    Returns
    -----------

    - Номер подъезда искомой квартиры (
        0 в случае множественного решения и 
        -1 в случае невозможности найти решение
    );
    - Номер этажа искомой квартиры (
        0 в случае множественного решения и 
        -1 в случае невозможности найти решение
    )
    '''
    ent = -1
    floor = -1
    goodflag = False
    
    # перебираем возможные варианты количества квартир
    # на лестничной клетке
    for flatsonfloor in range(1, maxrandval + 1):
        # вычисляем ожидаемый подъезд/этаж для данного
        # количества квартир на лестничной клетке
        nent, nfloor = check(k1, m, k2, p2, n2, flatsonfloor)
        # ели определилися подъезд
        if nent != -1:
            goodflag = True
            # если ранее решений не находилось
            if ent == -1:
                ent, floor = nent, nfloor
            # если другие решения находились
            # надо переключится на множество решений
            if ent != nent and ent != 0:
                ent = 0
            # если найдено несколько решений для этажей
            if floor != nfloor and floor != 0:
                floor = 0
    
    # если goodflag переключился
    # то значит мы ходили в блок где
    # находится хотябы одно решейние
    if goodflag:
       return (ent, floor)
    else:
        return (-1, -1)
    
if __name__ == "__main__":
    # print(" ".join(map(str,
    #     slow(*map(int, input().split(" ")))
    # )))
    print(slow(576, 191, 761, 1, 12))